name: Windows Build

on:
  push:
    branches:
      - '*'  # Specify branches where the workflow should run now
  pull_request:  # Here no specific branches are listed to allow all pull requests to generate a workflow run
#  workflow_dispatch:  # Só permite execução manual

jobs:
  Windows:
    runs-on: windows-2019
    env:
      QT_PATH: ${{ github.workspace }}\thirdparty\qt\5.15.2_wintab\msvc2019_64  # Path to custom Qt.
      VCINSTALLDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC'  # Path to MSVC.
      MSVCVERSION: "Visual Studio 16 2019"  # Visual Studio version.
      BOOST_ROOT: C:\local\boost_1_74_0  # Boost library root.
      OpenCV_DIR: C:\tools\opencv\build  # Path to OpenCV.

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: false
      - name: Install and Configure ccache
        run: |
          @echo on
          choco install ccache
          copy C:\ProgramData\chocolatey\lib\ccache\tools\ccache*\ccache.exe C:\ProgramData\chocolatey\bin\cl.exe
          mkdir %LOCALAPPDATA%\ccache
        shell: cmd

      - name: Set Path ccache
        uses: actions/cache@v4
        with:
          path: C:/Users/runneradmin/AppData/Local/ccache
          key: ${{ runner.os }}-${{ github.sha }}
          restore-keys: ${{ runner.os }}-

      - name: Cache OpenCV and Boost
        uses: actions/cache@v4
        with:
          path: |
            C:\tools\opencv
            C:\local\boost_1_74_0
          key: ${{ runner.os }}-opencv-boost-v1
          restore-keys: |
            ${{ runner.os }}-opencv-boost-

      - name: Check if OpenCV and Boost are already installed
        id: check_opencv_boost
        run: |
          IF EXIST "C:\tools\opencv\build" (echo "OpenCV found.") ELSE (exit 1)
          IF EXIST "C:\local\boost_1_74_0" (echo "Boost found.") ELSE (exit 1)
        shell: cmd
        continue-on-error: true

      - name: Install OpenCV and Boost if missing
        if: steps.check_opencv_boost.outcome == 'failure'
        run: |
          @echo on
          choco install opencv --version=4.10.0 -y
          choco install boost-msvc-14.2 --version=1.74.0 -y
        shell: cmd
        
      - name: Install custom Qt 5.15.2 with WinTab support
        run: |
          @echo on
          mkdir thirdparty\qt
          curl -fsSL -o Qt5.15.2_wintab.zip https://github.com/shun-iwasawa/qt5/releases/download/v5.15.2_wintab/Qt5.15.2_wintab.zip
          7z x Qt5.15.2_wintab.zip
          move Qt5.15.2_wintab\5.15.2_wintab thirdparty\qt
        shell: cmd
      
      - name: Install third-party prebuilt libs (LFS workaround)
        run: |
          @echo on
          curl -fsSL -o thirdparty-libs.zip https://github.com/andeon/opentoonz-thirdparty-libs/releases/download/prebuilt-libs-v1/thirdparty-libs.zip
          7z x -y thirdparty-libs.zip
        shell: cmd         

      - name: Install Zlib
        run: |
          @echo on
          curl -fsSL -o zlib-static-libs-md.zip https://github.com/andeon/zlib_custom/releases/download/v1.2.13/zlib-static-libs-md.zip
          7z x -y zlib-static-libs-md.zip -othirdparty\zlib-1.2.13\lib
        shell: cmd        

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: CMake configuration
        run: |
          @echo on
          cd thirdparty
          copy /Y tiff-4.0.3\libtiff\tif_config.vc.h tiff-4.0.3\libtiff\tif_config.h
          copy /Y tiff-4.0.3\libtiff\tiffconf.vc.h tiff-4.0.3\libtiff\tiffconf.h
          copy /Y libpng-1.6.21\scripts\pnglibconf.h.prebuilt libpng-1.6.21\pnglibconf.h
          cd ../toonz
          mkdir build
          cd build
          cmake ..\sources -G "%MSVCVERSION%" -Ax64 -DQT_PATH="%QT_PATH%" -DBOOST_ROOT="%BOOST_ROOT%" -DOpenCV_DIR="%OpenCV_DIR%" -DWITH_WINTAB=Y
        shell: cmd

      - name: Build Opentoonz
        run: |
          @echo on
          cd toonz\build
          msbuild /p:Configuration=RelWithDebInfo /m /verbosity:minimal ALL_BUILD.vcxproj
        shell: cmd

      - name: Create Package
        run: |
          @echo on
          cd toonz\build
          
          REM Create Opentoonz directory and copy files from RelWithDebInfo
          mkdir Opentoonz
          copy /Y RelWithDebInfo\*.* Opentoonz\
          REM Copy required DLLs for proper functionality
          copy /Y ..\..\thirdparty\glut\3.7.6\lib\glut64.dll Opentoonz
          copy /Y ..\..\thirdparty\glew\glew-1.9.0\bin\64bit\glew32.dll Opentoonz
          copy /Y ..\..\thirdparty\libmypaint\dist\64\libiconv-2.dll Opentoonz
          copy /Y ..\..\thirdparty\libmypaint\dist\64\libintl-8.dll Opentoonz
          copy /Y ..\..\thirdparty\libmypaint\dist\64\libjson-c-2.dll Opentoonz
          copy /Y ..\..\thirdparty\libmypaint\dist\64\libmypaint-1-4-0.dll Opentoonz
          
          REM Copy OpenCV DLL (IMPORTANT: Update path/filename when upgrading OpenCV version)
          copy /Y "C:\tools\opencv\build\x64\vc16\bin\opencv_world4100.dll" Opentoonz
          
          REM Deploy Qt dependencies
          "%QT_PATH%\bin\windeployqt.exe" Opentoonz\Opentoonz.exe --opengl
          
          del /Q Opentoonz\*.pdb  REM Remove .pdb files
          del /Q Opentoonz\vc_redist.x64.exe REM Remove vc_redist.x64.exe file
          
          REM Create portablestuff directory and copy stuff folder
          mkdir Opentoonz\portablestuff
          xcopy /Y /E /I ..\..\stuff .\Opentoonz\portablestuff
        shell: cmd

      - name: Create Artifact
        run: |
          mkdir artifact
          xcopy toonz\build\Opentoonz artifact\ /E /H /Y
        shell: cmd

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Opentoonz-${{ runner.os }}-${{ github.sha }}
          path: artifact
