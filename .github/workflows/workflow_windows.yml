name: Windows Build

on:
  push:
    branches:
      - '*'  # Specify branches where the workflow should run
    paths:
      - '**/*'                                    # Include all files in the repository
      - '!appveyor.yml'                           # Ignore changes in AppVeyor
      - '!README.md'                              # Exclude README
      - '!doc/**'                                 # Exclude documentation
      - '!**/.github/**'                          # Exclude everything in .github folder
      - '.github/workflows/workflow_windows.yml'  # Include Windows workflow file
  pull_request:
    paths:
      - '**/*'
      - '!appveyor.yml'
      - '!README.md'
      - '!doc/**'
      - '!**/.github/**'
      - '.github/workflows/workflow_windows.yml'

jobs:
  Windows:
    runs-on: windows-2022
    env:
      # QT related variable
      QT_PATH: ${{ github.workspace }}\thirdparty\qt\5.15.2_wintab\msvc2019_64  # Path to custom Qt

      # Visual Studio related variables
      MSVCVERSION: "Visual Studio 17 2022"  # Visual Studio version
      
      # Boost-related variables      
      BOOST_TOOLSET: "14.3"                 # Boost MSVC Toolset version
      BOOST_VERSION: "1.87.0"               # Boost version
      BOOST_ROOT: C:\local\boost_1_87_0     # Path to Boost library root
      
      # OpenCV-related variables      
      OPENCV_VERSION: "4.11.0"              # OpenCV version
      OpenCV_DIR: C:\tools\opencv\build     # Path to OpenCV

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: false  # Enable LFS to ensure all files are fetched

      - name: Setup MSVC environment
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cl.exe
        shell: cmd

      - name: Install clcache
        run: pip install clcache
        shell: cmd

      - name: Wrap clcache as cl.exe
        run: |
          mkdir C:\clcache-wrapper
          copy "C:\hostedtoolcache\windows\Python\3.9.13\x64\Scripts\clcache.exe" C:\clcache-wrapper\cl.exe
          echo C:\clcache-wrapper > %GITHUB_PATH%
        shell: cmd

      - name: Check cl.exe path
        run: |
          for /f "tokens=*" %%i in ('"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath') do set VS_PATH=%%i
          call "%VS_PATH%\VC\Auxiliary\Build\vcvars64.bat"
          echo PATH=%PATH%
          where cl
        shell: cmd

      # Configure clcache (simplified: use env vars, no direct calls with options)
      - name: Configure clcache
        run: |
          for /f "tokens=*" %%i in ('"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath') do set VS_PATH=%%i
          call "%VS_PATH%\VC\Auxiliary\Build\vcvars64.bat"
          REM Environment variables are now set; no need for direct clcache calls here
          REM Verify by showing stats (should show configured dir and size)
          clcache -s
        shell: cmd


      - name: Show clcache stats before build
        run: |
          @echo on
          clcache -s
        shell: cmd

      - name: List clcache directory contents before build
        run: |
          @echo on
          echo LOCALAPPDATA=%LOCALAPPDATA%
          IF EXIST "%LOCALAPPDATA%\clcache" (
            dir %LOCALAPPDATA%\clcache
          ) ELSE (
            echo clcache directory does not exist yet.
          )
        shell: cmd

      # Cache the clcache path
      - name: Set Path clcache
        uses: actions/cache@v4
        with:
          path: C:/Users/runneradmin/AppData/Local/clcache
          key: windows-clcache-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            windows-clcache-

      # Cache OpenCV and Boost libraries
      - name: Cache OpenCV and Boost
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            C:\tools\opencv
            ${{ env.BOOST_ROOT }}
          key: ${{ runner.os }}-opencv-boost-${{ env.OPENCV_VERSION }}-boost-${{ env.BOOST_VERSION }}
          restore-keys: |
            ${{ runner.os }}-opencv-boost-${{ env.OPENCV_VERSION }}-boost-

      # Install OpenCV and Boost if the cache is missing
      - name: Install OpenCV and Boost if cache is missing
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          @echo on
          choco install opencv --version=${{ env.OPENCV_VERSION }} -y
          choco install boost-msvc-${{ env.BOOST_TOOLSET }} --version=${{ env.BOOST_VERSION }} -y
        shell: cmd

      # Install custom Qt 5.15.2 with WinTab support
      - name: Install custom Qt 5.15.2 with WinTab support
        run: |
          @echo on
          mkdir thirdparty\qt
          curl -fsSL -o Qt5.15.2_wintab.zip https://github.com/shun-iwasawa/qt5/releases/download/v5.15.2_wintab/Qt5.15.2_wintab.zip
          7z x Qt5.15.2_wintab.zip
          move Qt5.15.2_wintab\5.15.2_wintab thirdparty\qt
        shell: cmd

      - name: Install third-party prebuilt libs (LFS workaround)
        run: |
          @echo on
          curl -fsSL -o thirdparty-libs.zip https://github.com/andeon/opentoonz-thirdparty-libs/releases/download/prebuilt-libs-v1/thirdparty-libs.zip
          7z x -y thirdparty-libs.zip
        shell: cmd    

      # Add msbuild to PATH for build process
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      # CMake configuration step
      - name: CMake configuration
        run: |
          @echo on
          cd thirdparty
          copy /Y tiff-4.0.3\libtiff\tif_config.vc.h tiff-4.0.3\libtiff\tif_config.h
          copy /Y tiff-4.0.3\libtiff\tiffconf.vc.h tiff-4.0.3\libtiff\tiffconf.h
          copy /Y libpng-1.6.21\scripts\pnglibconf.h.prebuilt libpng-1.6.21\pnglibconf.h
          cd ../toonz
          mkdir build
          cd build
          dir ..\sources  REM Check sources directory
          cmake ..\sources -G "%MSVCVERSION%" -Ax64 -DQT_PATH="%QT_PATH%" -DBOOST_ROOT="%BOOST_ROOT%" -DOpenCV_DIR="%OpenCV_DIR%" -DWITH_WINTAB=Y
        shell: cmd

      - name: Check which cl is used during CMake config
        run: |
          where cl
        shell: cmd

      - name: Verify CMake compiler
        run: |
          @echo on
          cd toonz\build
          cmake -LA -S ..\sources
        shell: cmd

      # Build Opentoonz using MSBuild
      - name: Build Opentoonz
        run: |
          @echo on
          cd toonz\build
          msbuild /p:Configuration=RelWithDebInfo /m /verbosity:diagnostic ALL_BUILD.vcxproj
        shell: cmd

      - name: Show clcache stats after build
        run: |
          clcache -s
          dir C:\Users\runneradmin\clcache
        shell: cmd

      - name: List clcache directory contents after build
        run: |
          @echo on
          dir %LOCALAPPDATA%\clcache
        shell: cmd

      # Create the package
      - name: Create Package
        run: |
          @echo on
          cd toonz\build
          
          REM Create Opentoonz directory and copy files from RelWithDebInfo
          mkdir Opentoonz
          copy /Y RelWithDebInfo\*.* Opentoonz\
          
          REM Copy required DLLs for proper functionality
          copy /Y ..\..\thirdparty\glut\3.7.6\lib\glut64.dll Opentoonz
          copy /Y ..\..\thirdparty\glew\glew-1.9.0\bin\64bit\glew32.dll Opentoonz
          copy /Y ..\..\thirdparty\libmypaint\dist\64\libiconv-2.dll Opentoonz
          copy /Y ..\..\thirdparty\libmypaint\dist\64\libintl-8.dll Opentoonz
          copy /Y ..\..\thirdparty\libmypaint\dist\64\libjson-c-2.dll Opentoonz
          copy /Y ..\..\thirdparty\libmypaint\dist\64\libmypaint-1-4-0.dll Opentoonz
          
          REM Copy OpenCV DLL (IMPORTANT: Update path/filename when upgrading OpenCV version)
          copy /Y "C:\tools\opencv\build\x64\vc16\bin\opencv_world4110.dll" Opentoonz
          
          REM Deploy Qt dependencies
          "%QT_PATH%\bin\windeployqt.exe" Opentoonz\Opentoonz.exe --opengl
          
          del /Q Opentoonz\*.pdb  REM Remove .pdb files
          del /Q Opentoonz\vc_redist.x64.exe REM Remove vc_redist.x64.exe file
          
          REM Create portablestuff directory and copy stuff folder
          mkdir Opentoonz\portablestuff
          xcopy /Y /E /I ..\..\stuff .\Opentoonz\portablestuff
        shell: cmd

      # Create artifact from the build
      - name: Create Artifact
        run: |
          mkdir artifact
          xcopy toonz\build\Opentoonz artifact\ /E /H /Y
        shell: cmd

      # Upload the generated artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Opentoonz-${{ runner.os }}-${{ github.sha }}
          path: artifact